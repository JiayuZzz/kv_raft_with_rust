// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Null {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Null {
    pub fn new() -> Null {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Null {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Null {
        Null::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<Null>(
                    "Null",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Null {
        static mut instance: ::protobuf::lazy::Lazy<Null> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Null,
        };
        unsafe {
            instance.get(Null::new)
        }
    }
}

impl ::protobuf::Clear for Null {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Null {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Null {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetReq {
    // message fields
    pub key: ::std::string::String,
    pub client_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl GetReq {
    pub fn new() -> GetReq {
        ::std::default::Default::default()
    }

    // string key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    pub fn get_key(&self) -> &str {
        &self.key
    }

    // uint64 client_id = 2;

    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
}

impl ::protobuf::Message for GetReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if self.client_id != 0 {
            os.write_uint64(2, self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetReq {
        GetReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &GetReq| { &m.key },
                    |m: &mut GetReq| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &GetReq| { &m.client_id },
                    |m: &mut GetReq| { &mut m.client_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetReq>(
                    "GetReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetReq {
        static mut instance: ::protobuf::lazy::Lazy<GetReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetReq,
        };
        unsafe {
            instance.get(GetReq::new)
        }
    }
}

impl ::protobuf::Clear for GetReq {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_client_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetReply {
    // message fields
    pub state: State,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl GetReply {
    pub fn new() -> GetReply {
        ::std::default::Default::default()
    }

    // .State state = 1;

    pub fn clear_state(&mut self) {
        self.state = State::OK;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: State) {
        self.state = v;
    }

    pub fn get_state(&self) -> State {
        self.state
    }

    // string value = 2;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    pub fn get_value(&self) -> &str {
        &self.value
    }
}

impl ::protobuf::Message for GetReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != State::OK {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.state != State::OK {
            os.write_enum(1, self.state.value())?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetReply {
        GetReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<State>>(
                    "state",
                    |m: &GetReply| { &m.state },
                    |m: &mut GetReply| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &GetReply| { &m.value },
                    |m: &mut GetReply| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetReply>(
                    "GetReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetReply {
        static mut instance: ::protobuf::lazy::Lazy<GetReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetReply,
        };
        unsafe {
            instance.get(GetReply::new)
        }
    }
}

impl ::protobuf::Clear for GetReply {
    fn clear(&mut self) {
        self.clear_state();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PutReq {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    pub client_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PutReq {
    pub fn new() -> PutReq {
        ::std::default::Default::default()
    }

    // string key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    pub fn get_key(&self) -> &str {
        &self.key
    }

    // string value = 2;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    pub fn get_value(&self) -> &str {
        &self.value
    }

    // uint64 client_id = 3;

    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
}

impl ::protobuf::Message for PutReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        if self.client_id != 0 {
            os.write_uint64(3, self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PutReq {
        PutReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &PutReq| { &m.key },
                    |m: &mut PutReq| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &PutReq| { &m.value },
                    |m: &mut PutReq| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "client_id",
                    |m: &PutReq| { &m.client_id },
                    |m: &mut PutReq| { &mut m.client_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PutReq>(
                    "PutReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PutReq {
        static mut instance: ::protobuf::lazy::Lazy<PutReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PutReq,
        };
        unsafe {
            instance.get(PutReq::new)
        }
    }
}

impl ::protobuf::Clear for PutReq {
    fn clear(&mut self) {
        self.clear_key();
        self.clear_value();
        self.clear_client_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PutReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PutReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PutReply {
    // message fields
    pub state: State,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PutReply {
    pub fn new() -> PutReply {
        ::std::default::Default::default()
    }

    // .State state = 1;

    pub fn clear_state(&mut self) {
        self.state = State::OK;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: State) {
        self.state = v;
    }

    pub fn get_state(&self) -> State {
        self.state
    }
}

impl ::protobuf::Message for PutReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != State::OK {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.state != State::OK {
            os.write_enum(1, self.state.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PutReply {
        PutReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<State>>(
                    "state",
                    |m: &PutReply| { &m.state },
                    |m: &mut PutReply| { &mut m.state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PutReply>(
                    "PutReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PutReply {
        static mut instance: ::protobuf::lazy::Lazy<PutReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PutReply,
        };
        unsafe {
            instance.get(PutReply::new)
        }
    }
}

impl ::protobuf::Clear for PutReply {
    fn clear(&mut self) {
        self.clear_state();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PutReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PutReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum State {
    OK = 0,
    WRONG_LEADER = 1,
    NOT_FOUND = 2,
    IO_ERROR = 3,
}

impl ::protobuf::ProtobufEnum for State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<State> {
        match value {
            0 => ::std::option::Option::Some(State::OK),
            1 => ::std::option::Option::Some(State::WRONG_LEADER),
            2 => ::std::option::Option::Some(State::NOT_FOUND),
            3 => ::std::option::Option::Some(State::IO_ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [State] = &[
            State::OK,
            State::WRONG_LEADER,
            State::NOT_FOUND,
            State::IO_ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("State", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for State {
}

impl ::std::default::Default for State {
    fn default() -> Self {
        State::OK
    }
}

impl ::protobuf::reflect::ProtobufValue for State {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fkvservice.proto\x1a\reraftpb.proto\"\x06\n\x04Null\"7\n\x06GetReq\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x1b\n\tclient_id\x18\
    \x02\x20\x01(\x04R\x08clientId\">\n\x08GetReply\x12\x1c\n\x05state\x18\
    \x01\x20\x01(\x0e2\x06.StateR\x05state\x12\x14\n\x05value\x18\x02\x20\
    \x01(\tR\x05value\"M\n\x06PutReq\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\x12\x1b\n\tclien\
    t_id\x18\x03\x20\x01(\x04R\x08clientId\"(\n\x08PutReply\x12\x1c\n\x05sta\
    te\x18\x01\x20\x01(\x0e2\x06.StateR\x05state*>\n\x05State\x12\x06\n\x02O\
    K\x10\0\x12\x10\n\x0cWRONG_LEADER\x10\x01\x12\r\n\tNOT_FOUND\x10\x02\x12\
    \x0c\n\x08IO_ERROR\x10\x032k\n\tKvService\x12\x1b\n\x03Get\x12\x07.GetRe\
    q\x1a\t.GetReply\"\0\x12\x1b\n\x03Put\x12\x07.PutReq\x1a\t.PutReply\"\0\
    \x12$\n\x07SendMsg\x12\x10.eraftpb.Message\x1a\x05.Null\"\0J\xbd\x08\n\
    \x06\x12\x04\0\0%\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\
    \x12\x03\x02\x07\x16\n\n\n\x02\x06\0\x12\x04\x04\0\x08\x01\n\n\n\x03\x06\
    \0\x01\x12\x03\x04\x08\x11\n\x0b\n\x04\x06\0\x02\0\x12\x03\x05\x04)\n\
    \x0c\n\x05\x06\0\x02\0\x01\x12\x03\x05\x08\x0b\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x05\x0c\x12\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x05\x1d%\n\
    \x0b\n\x04\x06\0\x02\x01\x12\x03\x06\x04)\n\x0c\n\x05\x06\0\x02\x01\x01\
    \x12\x03\x06\x08\x0b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x06\x0c\x12\n\
    \x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x06\x1d%\n\x0b\n\x04\x06\0\x02\x02\
    \x12\x03\x07\x041\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x07\x08\x0f\n\
    \x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x07\x10\x1f\n\x0c\n\x05\x06\0\x02\
    \x02\x03\x12\x03\x07)-\n\n\n\x02\x05\0\x12\x04\n\0\x0f\x01\n\n\n\x03\x05\
    \0\x01\x12\x03\n\x05\n\n\x0b\n\x04\x05\0\x02\0\x12\x03\x0b\x04\x0b\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x03\x0b\x04\x06\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x0b\t\n\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x0c\x04\x15\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x0c\x04\x10\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x0c\x13\x14\n\x0b\n\x04\x05\0\x02\x02\x12\x03\r\x04\x12\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\r\x04\r\n\x0c\n\x05\x05\0\x02\x02\x02\x12\
    \x03\r\x10\x11\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x0e\x04\x11\n\x0c\n\x05\
    \x05\0\x02\x03\x01\x12\x03\x0e\x04\x0c\n\x0c\n\x05\x05\0\x02\x03\x02\x12\
    \x03\x0e\x0f\x10\n\t\n\x02\x04\0\x12\x03\x11\0\x0f\n\n\n\x03\x04\0\x01\
    \x12\x03\x11\x08\x0c\n\n\n\x02\x04\x01\x12\x04\x13\0\x16\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x13\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x14\
    \x04\x13\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x14\x04\x13\x10\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03\x14\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x14\x0b\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x14\x11\x12\n\x0b\
    \n\x04\x04\x01\x02\x01\x12\x03\x15\x04\x19\n\r\n\x05\x04\x01\x02\x01\x04\
    \x12\x04\x15\x04\x14\x13\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x15\x04\
    \n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x15\x0b\x14\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x15\x17\x18\n\n\n\x02\x04\x02\x12\x04\x18\0\x1b\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03\x18\x08\x10\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03\x19\x04\x14\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x19\x04\x18\x12\
    \n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x19\x04\t\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x19\n\x0f\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x19\x12\
    \x13\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1a\x04\x15\n\r\n\x05\x04\x02\
    \x02\x01\x04\x12\x04\x1a\x04\x19\x14\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03\x1a\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1a\x0b\x10\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03\x1a\x13\x14\n\n\n\x02\x04\x03\x12\x04\
    \x1d\0!\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1d\x08\x0e\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x03\x1e\x04\x13\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x1e\
    \x04\x1d\x10\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1e\x04\n\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\x1e\x0b\x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03\x1e\x11\x12\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1f\x04\x15\n\r\n\
    \x05\x04\x03\x02\x01\x04\x12\x04\x1f\x04\x1e\x13\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03\x1f\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1f\
    \x0b\x10\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1f\x13\x14\n\x0b\n\x04\
    \x04\x03\x02\x02\x12\x03\x20\x04\x19\n\r\n\x05\x04\x03\x02\x02\x04\x12\
    \x04\x20\x04\x1f\x15\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\x20\x04\n\n\
    \x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x20\x0b\x14\n\x0c\n\x05\x04\x03\
    \x02\x02\x03\x12\x03\x20\x17\x18\n\n\n\x02\x04\x04\x12\x04#\0%\x01\n\n\n\
    \x03\x04\x04\x01\x12\x03#\x08\x10\n\x0b\n\x04\x04\x04\x02\0\x12\x03$\x04\
    \x14\n\r\n\x05\x04\x04\x02\0\x04\x12\x04$\x04#\x12\n\x0c\n\x05\x04\x04\
    \x02\0\x06\x12\x03$\x04\t\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03$\n\x0f\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x03$\x12\x13b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
